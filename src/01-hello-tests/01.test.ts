import {mult, splitIntoWords, sum} from "./01";

//1конспект: как создаются тесты. Зарезервированы специальные названия
// функций, одно из ниx - test. Пишем test  и описываем
// что должно произойти. Т е test это функция в которую мы прописываем
// название в виде строки. В названии пишем не просто имя, а указываем
// что должно произойти, именно по этому мы прописываем имя в виде строки
// Также название является параметром функции, в тестах является первым
// параметром, а вторым параметром мы прописываем саму функцию, которая
// и будет являтся тестом.

// 2конспект: "данные", если тестов более одного можно вынести
// вверх, над тестами. Работает так, тест поищет данные в тесте,
// не найдет их и поищет вверху, и найдет. Т е если исходные
// данные у нас повторяются,
// т е являются общими данными,то их можно выносить перед тестами
// и они будут исходные для всех тестов

// 3конспект: с выносом общих дынных, есть один нюанс. Но как
// правило с const такого быть не может(но бывают ситуации что может)
// , а вот с let. Меняем наш const на let... В видео Димыч
// говорит что мы не должны писать и чёткие числа. Так как тесты
// выполняются поочереди и какой-то из предыдущих тестов может
// переменую испортить

// 4конспект: мы просто определяем глобальные переменные,
// но не определяем их значение., см код.

// 5 конспект: мы просто прописываем функцию, которую
// тестовая среда будет запускать перед запуском теста:
// функция beforeEach(() => {}) - это callback-функция, которая
// выполнится после того как другая функция выыполнится. Тесты
// тоже callback функция - мы её отдаем функции тест, когда тесты
// запускаем, тогда и запусккается наша функция

// 6 конспект: запустился один тест и в нём  мы переопределяем
// какую-то переменну. a = 100, и она переопределяется только
// в одном тесте, следующий запускается опять сглобальными
// переменными

//data т е подготовительный этап или данные, которые мы вынесли
// перед тестами
let a: number;
let b: number;
let c: number;

beforeEach(() => {
    a = 1;
    b = 2;
    c = 3;
})

// название теста: "сумма должна быть правильной"
test('sum should be correct', () => {
    //data данные вынесены над тестами
    //action действие которое мы выполняем
    const result1 = sum(a,b);
    a = 100; // Я перезатер глобальное a, называется замыкание.
            // Взял переменную из вне и её перезатёр. И во всех
            // тестах ниже a будет ровняться 100.
    const result2 = sum(b,c);

    //expect result ожидаем получить какой-то результат
    expect(result1).toBe(3);
    expect(result2).toBe(5);
})

// название теста: "умножение должно быть правильным"
test('multiply should be correct', () => {
    //данные вынесены над тестами
    //action действие которое мы выполняем
    const result1 = mult(a,b);
    const result2 = mult(b,c);

    //expect result ожидаем получить какой-то результат
    expect(result1).toBe(2);
    expect(result2).toBe(6);
})

// название теста: "разбиение на слова должно быть правильным"
test ('splitting into words should be correct', () => {
    const sent1 = "Hello my friend!"
    const sent2 = "JS - the best programming language."

    const result1 = splitIntoWords(sent1);
    const result2 = splitIntoWords(sent2);

    expect(result1.length).toBe(3);
    expect(result1[0]).toBe("hello");
    expect(result1[1]).toBe("my");
    expect(result1[2]).toBe("friend");

    expect(result2.length).toBe(5);
    expect(result2[0]).toBe("js");
    expect(result2[1]).toBe("the");
    expect(result2[2]).toBe("best");
    expect(result2[3]).toBe("programming");
    expect(result2[4]).toBe("language");
})